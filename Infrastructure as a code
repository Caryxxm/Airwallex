- name: Create Resources
  hosts: localhost
  remote_user: root

  roles:
    - vpc
    - vswitch
    - security_group
    - ecs
# common parameters
alicloud_region: "cn-hangzhou"
alicloud_zone: "cn-hangzhou-i"

# create vpc parameters
vpc_cidr: "172.16.0.0/12"
vpc_name: "Cloudshell_Tutorial_Cli_Ansible"
vpc_description: "Create a new VPC resource via Ansible example."

# create vswitch parameters
vswitch_cidr: "172.16.1.0/24"
vswitch_name: "Cloudshell_Tutorial_Cli_Ansible"
vswitch_description: "Create a new VSwitch resource via Ansible example."

# create security parameters
group_name: "Cloudshell_Tutorial_Cli_Ansible"
group_description: "Create a new security group resource via Ansible example."
group_inboundRules:
  - ip_protocol: tcp
    port_range: 22/22
    source_cidr_ip: 0.0.0.0/0
    priority: 1

  - ip_protocol: tcp
    port_range: 80/80
    source_cidr_ip: 0.0.0.0/0
    priority: 1

# create ECS instance parameters
image_id: "centos_7_06_64_20G_alibase_20190711.vhd"
instance_type: "ecs.t5-lc2m1.nano"
instance_name: "Cloudshell_Tutorial_Cli_Ansible"
instance_description: "Create a new ECS instance resource via Ansible example."
host_name: "my-instance-from-ansible"
password: "Test12345"

allocate_public_ip: True
internet_charge_type: "PayByTraffic"
max_bandwidth_in: 200
max_bandwidth_out: 50
instance_tags: {created_from: cloudshell-tutorial-cli-ansible}

system_disk_category: "cloud_ssd"
system_disk_size: 20

number_of_instances: 2
- name: Get the existing vpc
  ali_vpc_facts:
    region: '{{alicloud_region}}'
    vpc_name: '{{vpc_name}}'
  register: vpcs

- name: Create a new alicloud VPC resource
  ali_vpc:
    alicloud_region: '{{ alicloud_region }}'
    state: 'present'
    cidr_block: '{{ vpc_cidr }}'
    vpc_name: '{{ vpc_name }}'
    description: '{{ vpc_description }}'
  when: not vpcs.vpcs
  register: vpc
  - name: Get the existing vpc
  ali_vpc_facts:
    region: '{{alicloud_region}}'
    vpc_name: '{{vpc_name}}'
  register: vpcs

- name: Create a new alicloud VSwitch resource
  ali_vswitch:
    alicloud_region: '{{ alicloud_region }}'
    alicloud_zone: '{{ alicloud_zone }}'
    state: 'present'
    cidr_block: '{{ vswitch_cidr }}'
    vswitch_name: '{{ vswitch_name }}'
    description: '{{ vswitch_description }}'
    vpc_id: '{{vpcs.vpcs.0.id}}'
  register: vswitch
  - name: Get the existing vpc
  ali_vpc_facts:
    region: '{{alicloud_region}}'
    vpc_name: '{{vpc_name}}'
  register: vpcs

- name: Get the existing groups
  ali_security_group_facts:
    region: '{{alicloud_region}}'
    group_name: '{{ group_name }}'
    filters:
      vpc_id: '{{vpcs.vpcs.0.id}}'
  register: sgs

- name: Creating security group
  ali_security_group:
    alicloud_region: '{{ alicloud_region }}'
    state: 'present'
    name: '{{ group_name }}'
    description: '{{ group_description }}'
    vpc_id: '{{vpcs.vpcs.0.id}}'
    rules: '{{ group_inboundRules }}'
  when: not sgs.groups
  register: group
  - name: Get the existing groups
  ali_security_group_facts:
    region: '{{alicloud_region}}'
    group_name: '{{ group_name }}'
    filters:
      vpc_id: '{{vpcs.vpcs.0.id}}'
  register: sgs

- name: Creating an ECS instance
  ali_instance:
    alicloud_region: '{{ alicloud_region }}'
    alicloud_zone: '{{ alicloud_zone }}'
    image: '{{ image_id }}'
    type: '{{ instance_type }}'
    instance_name: '{{ instance_name }}'
    description: '{{ instance_description }}'
    host_name: '{{ host_name }}'
    password: '{{ password }}'

    allocate_public_ip: '{{ allocate_public_ip }}'
    internet_charge_type: '{{ internet_charge_type }}'
    max_bandwidth_in: '{{ max_bandwidth_in }}'
    max_bandwidth_out: '{{ max_bandwidth_out }}'
    instance_tags: '{{ instance_tags }}'

    security_groups: ['{{ sgs.groups.0.id }}']
    vswitch_id: '{{ vswitch.vswitch.id }}'

    system_disk_category: '{{ system_disk_category }}'
    system_disk_size: '{{ system_disk_size }}'

    state: 'present'
    count: '{{ number_of_instances }}'
  when: sgs.groups
  register: instance

# Install Docker CE
  - hosts: my-instance-from-ansible
    tasks:
      - name: cp docker.repo
        copy:
          src: "/etc/yum.repos.d/docker-ce.repo"
          dest: "/etc/yum.repos.d/docker-ce.repo"
      - name: setup yum-utils
        yum: name=yum-utils state=present
      - name: setup device-mapper-persistent-data
        yum: name=device-mapper-persistent-data state=present
      - name: setup lvm2
        yum: name=lvm2 state=present
      - name: setup docker-ce
        yum: name=docker-ce state=present
      - name: service on
        service: name=docker.service enabled=yes state=started

# Deploy nginx container
- hosts: my-instance-from-ansible
  remote_user: root
  become: yes
  gather_facts: no
  vars:
    container_name: "yum_nginx"
    container_image: "nginx:1.21.4"
    container_wdir: "/data/sdb1/container/{{ container_name }}.8080"

  tasks:
   - name: create {{ container_wdir }} directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ container_wdir }}/conf"
        - "{{ container_wdir }}/logs"
        - "{{ container_wdir }}/data"
  - name: config nginx
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      with_items:
        - { src: "conf/nginx.conf.j2", dest: "{{ container_wdir }}/conf/nginx.conf", mode: "0664" }
  - name: create container
      ansible.builtin.docker_container:
        # 4.1.容器名称和使用的镜像
        name: "{{ container_name }}"
        image: "{{ container_image }}"
        container_default_behavior: no_defaults
        # 4.2.挂载卷：配置文件目录、日志目录、数据目录
        volumes:
          - "{{ container_wdir }}/conf/nginx.conf:/etc/nginx/nginx.conf:ro"
          - "{{ container_wdir }}/logs:/var/log/nginx"
          - "{{ container_wdir }}/data:/usr/share/nginx/html/:ro"
        # 4.3.端口映射
        ports:
          - "8080:80"
        # 4.4.设置环境变量
        env:
          TZ: 'Asia/Shanghai'
          LANG: zh_CN.UTF-8
